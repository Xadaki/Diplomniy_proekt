<!DOCTYPE html>
<html>
<head>
<title>Базы данных</title>
<meta charset="utf-8">
<style>
   table {
    width: 700px; 
    border: 0px white; 
    margin: auto;
   }
   td {
    text-align: left; 
   }
</style>
</head>
<body>

<table>
<tr><td>

<div class="blog-section blog-section--post-info blog-section--fullwidth">
    <div class="blog-section__wrap">
        <div class="blog-section__content">
            <div class="blog-section__wrap-inner">
                <div class="post-info post-info--fullwidth">
                    <h1 class="post-info__title" style="text-align:center;">Работа с базами данных в PHP</h1>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="blog-section blog-section--post-content blog-section--fullwidth">
    <div class="blog-section__wrap">
        <div class="blog-section__content blog-section__content--short">
            <div class="blog-section__wrap-inner">
                <div class="post-content post-content--fullwidth">
                    <p>База данных (БД)&nbsp;— это программа, которая позволяет хранить и&nbsp;обрабатывать информацию в&nbsp;структурированном виде. БД&nbsp;— отдельная независимая программа, которая не&nbsp;входит в&nbsp;язык программирования. В&nbsp;базе данных можно сохранять любую информацию, чтобы позже получать к&nbsp;ней доступ.</p>
                    <h2 style="text-align:center;">Зачем нужны базы данных</h2>
                    <p>Базы данных нужны для хранения информации. Чтобы получить полное понимание необходимости использования&nbsp;БД&nbsp;в&nbsp;современном веб-программировании, необходимо ответить на&nbsp;три вопроса:</p>
                    <ol>
                        <li>Какую информацию и&nbsp;зачем мы&nbsp;храним?</li>
                        <li>В&nbsp;каком виде и&nbsp;как надо хранить эту информацию?</li>
                        <li>Как и&nbsp;каким способом можно получить доступ к&nbsp;этой информации?</li>
                    </ol>
                    <p>Предположим, вы&nbsp;решили сделать сайт, где каждый пользователь может вести личный дневник наблюдения за&nbsp;погодой в&nbsp;своем городе. Такой сайт должен иметь как минимум одну форму ввода со&nbsp;следующими полями: город, дата, температура, облачность, погодное явление, и&nbsp;так далее.</p>
                    <p>Каждый день наблюдатель записывает показания погоды в&nbsp;эту форму, чтобы когда-нибудь в&nbsp;будущем вернуться на&nbsp;сайт и&nbsp;посмотреть, какая была погода месяц или даже год назад. Из&nbsp;этого примера следует, что программист каким-то образом должен сохранять данные из&nbsp;формы для&nbsp;дальнейшего использования.</p>
                    <p>Кроме обычного просмотра дневника погоды за&nbsp;месяц в&nbsp;виде таблицы, можно сделать и&nbsp;более сложный проект. Например, чтобы электронный дневник чем-то качественно отличался от&nbsp;своего бумажного аналога, будет неплохо добавить туда возможности для простого анализа: показать какой день был самым холодным в&nbsp;ноябре или какой продолжительности была самая длинная серия пасмурных дней.</p>
                    <p>Получается, что данные надо не&nbsp;просто как-то хранить, но&nbsp;и&nbsp;иметь возможность их&nbsp;обрабатывать и&nbsp;анализировать.</p>
                    <p>Именно для этих целей и&nbsp;существуют базы данных.</p>
                    <h2 style="text-align:center;">Как хранится информация в&nbsp;базе данных</h2>
                    <p>В&nbsp;основе всей структуры хранения лежат три понятия&nbsp;—&nbsp;база данных, таблица и&nbsp;запись.</p>
                    <div class="post-highlighted-text">
                        <p>&nbsp; &nbsp; База данных&nbsp;— это высокоуровневое понятие, которое означает объединение совокупности данных, хранимых для выполнения одной цели.</p>
                    </div>
                    <p>Если мы&nbsp;делаем современный сайт, то&nbsp;все его данные будут храниться внутри одной базы данных.</p>
                    <h3><strong>Таблица</strong></h3>
                    <p>По&nbsp;отношению к&nbsp;базе данных таблица является вложенным объектом. То&nbsp;есть одна&nbsp;БД&nbsp;может содержать в&nbsp;себе множество таблиц. Аналогией из&nbsp;реального мира может быть шкаф (база данных) внутри которого лежит множество коробок (таблиц).</p>
                    <p>Таблицы нужны для хранения данных одного типа, например, списка городов, пользователей сайта, или библиотечного каталога. Таблицу можно представить как обычный лист в&nbsp;Excel-таблице, то&nbsp;есть совокупность строк и&nbsp;столбцов.</p>
                    <p>Заполняя таблицу, пользователь определяет столбцы, у&nbsp;каждого из&nbsp;которых есть заголовок. В&nbsp;строках хранится информация. В&nbsp;БД&nbsp;точно также: создавая новую таблицу, необходимо описать, из&nbsp;каких столбцов она состоит, и&nbsp;дать им&nbsp;имена.</p>
                    <h3 style="text-align:center;"><strong>Запись</strong></h3>
                    <p>Запись&nbsp;— это строка электронной таблицы. Это&nbsp;неделимая сущность, которая хранится в&nbsp;таблице. Когда мы&nbsp;сохраняем данные веб-формы с&nbsp;сайта, то&nbsp;на&nbsp;самом деле добавляем новую запись в&nbsp;какую-то из&nbsp;таблиц базы данных.</p>
                    <p>Запись состоит из&nbsp;полей (столбцов) и&nbsp;их&nbsp;значений. Но&nbsp;значения не&nbsp;могут быть какими угодно. Определяя столбец, программист должен указать тип данных, который будет храниться в&nbsp;этом столбце: текстовый, числовой, логический, файловый и&nbsp;так далее. Это нужно для того, чтобы в&nbsp;будущем в&nbsp;базу не&nbsp;были записаны данные неверного типа.</p>
                    <p>Соберем всё вместе, чтобы понять, как будет выглядеть ведение дневника погоды при участии базы данных.</p>
                    <p><strong>Создадим для сайта новую&nbsp;БД</strong> и&nbsp;дадим ей&nbsp;название <code>weather_diary</code>.</p>
                    <p><strong>Создадим в&nbsp;БД&nbsp;новую таблицу</strong> с&nbsp;именем <code>weather_log</code> и&nbsp;определим там следующие столбцы:</p>
                    <p>—&nbsp;Город (тип: текст); —&nbsp;День (тип: дата); —&nbsp;Температура (тип: число); —&nbsp;Облачность (тип: число; от&nbsp;0 (нет облачности) до&nbsp;4 (полная облачность)); —&nbsp;Были&nbsp;ли осадки (тип: истина или ложь); —&nbsp;Комментарий (тип: текст).</p>
                    <p>При сохранении формы будем добавлять в&nbsp;таблицу <code>weather_log</code> новую запись, и&nbsp;заполнять в&nbsp;ней все поля информацией из&nbsp;полей формы.</p>
                    <p>Теперь можно быть уверенными, что наблюдения наших пользователей не&nbsp;пропадут, и&nbsp;к&nbsp;ним всегда можно будет получить доступ.</p>
                    <h2 style="text-align:center;"><strong>Реляционная база данных</strong></h2>
                    <p>Английское слово <i>relation</i> можно перевести как «связь», «отношение». А&nbsp;определение «реляционные базы данных» означает, что таблицы в&nbsp;этой&nbsp;БД&nbsp;могут вступать в&nbsp;отношения и&nbsp;находиться в&nbsp;связи между собой.</p>
                    <p>Например, одна таблица может ссылаться на&nbsp;другую таблицу. Это часто требуется, чтобы сократить объём и&nbsp;избежать дублирования информации. В&nbsp;сценарии с&nbsp;дневником погоды пользователь вводит название своего города. Это название сохраняется вместе с&nbsp;погодными данными. Но&nbsp;можно поступить иначе:</p>
                    <ol>
                        <li>Создать новую таблицу с&nbsp;именем <code>cities</code>.</li>
                        <li>Все города в&nbsp;России известны, поэтому их&nbsp;все можно добавить в&nbsp;одну таблицу.</li>
                        <li>Переделать форму, изменив поле ввода города с&nbsp;текстового на&nbsp;поле типа <code>select</code>, чтобы пользователь не&nbsp;вписывал город, а&nbsp;выбирал его из&nbsp;списка.</li>
                        <li>При сохранении погодной записи, в&nbsp;поле для города поставить ссылку на&nbsp;соответствующую запись из&nbsp;таблицы городов.</li>
                    </ol>
                    <p>Так мы&nbsp;решим сразу две задачи:</p>
                    <ul>
                        <li>Сократим объём хранимой информации, так как погодные записи больше не&nbsp;будут содержать название города;</li>
                        <li>Избежим дублирования: все пользователи будут выбирать один из&nbsp;заранее определённых городов, что исключит опечатки.</li>
                    </ul>
                    <p>Связи между таблицами в&nbsp;БД&nbsp;бывают разных видов. В&nbsp;примере выше использовалась связь типа «один-ко-многим», так как одному городу может соответствовать множество погодных записей, но&nbsp;не&nbsp;наоборот! Бывают связи и&nbsp;других типов: «один-к-одному» и&nbsp;«многие-ко-многим», но&nbsp;они используются значительно реже.</p>
                </div>
            </div>
        </div>
    </div>
</div>

</tr></td>
</table>
<br></br>
<br></br>
<br></br>
<div align="center">
<a href="http-protocol.php">Предыдущий раздел</a>| <a href="index.html">На главную</a> | <a href="sql.php">Следующий раздел</a>
</div>
<br></br>

</body>