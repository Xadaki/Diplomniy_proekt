<!DOCTYPE html>
<html>
<head>
<title>Объекты</title>
<meta charset="utf-8">
<style>
   table {
    width: 700px; 
    border: 0px white; 
    margin: auto;
   }
   td {
    text-align: left; 
   }
</style>
</head>
<body>

<table>
<tr><td>

<div class="blog-section blog-section--post-info blog-section--fullwidth">
    <div class="blog-section__wrap">
        <div class="blog-section__content">
            <div class="blog-section__wrap-inner">
                <div class="post-info post-info--fullwidth">
                    <h1 class="post-info__title" style="text-align:center;">Объекты и классы в PHP</h1>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="blog-section blog-section--post-content blog-section--fullwidth">
    <div class="blog-section__wrap">
        <div class="blog-section__content blog-section__content--short">
            <div class="blog-section__wrap-inner">
                <div class="post-content post-content--fullwidth">
                    <p>Объекты в&nbsp;PHP&nbsp;— это просто ещё один тип данных. Объект позволяет хранить в&nbsp;переменной набор из&nbsp;свойств и&nbsp;их&nbsp;значений, а&nbsp;также встроенные функции. Это делает объекты похожими по&nbsp;своей структуре на&nbsp;ассоциативные массивы. Но&nbsp;отличие от&nbsp;массивов всё-таки есть, и&nbsp;при этом достаточно важное&nbsp;— объекты могут иметь внутреннее состояние.</p>
                    <h2 style="text-align:center;">Особенности объектов и&nbsp;их&nbsp;отличия от&nbsp;массивов</h2>
                    <p>Давайте разберёмся, что такое PHP-объект. Как сказано выше, объекты похожи на&nbsp;массивы, но&nbsp;со&nbsp;своими особенностями. Объекты могут содержать отдельные значения, каждое под своим ключом. Эти значения называются свойствами объекта.</p>
                    <p>Также объекты могут иметь внутри себя функции&nbsp;— их&nbsp;называют методами объекта. Методы могут обращаться к&nbsp;любым свойствам объекта, читать и&nbsp;записывать туда данные.</p>
                    <p>Значение свойства объекта может быть любого типа: число, строка, массив, другой объект. Но, в&nbsp;отличие от&nbsp;массива, объекты не&nbsp;позволяют добавлять в&nbsp;себя новые значения. То&nbsp;есть объект всегда имеет конечное число своих свойств и&nbsp;методов. Менять значения существующих свойств можно, а&nbsp;удалять и&nbsp;заменять их&nbsp;— нельзя. Что в&nbsp;корне отличается от&nbsp;поведения массива, ведь там добавлять и&nbsp;удалять значения можно в&nbsp;любое время.</p>
                    <p>Но&nbsp;самая большая особенность объектов&nbsp;— это&nbsp;то, как они создаются. Если массив создаётся либо пустым, либо сразу с&nbsp;набором значений, то&nbsp;объекты устроены иначе. Дело в&nbsp;том, что объекты не&nbsp;существуют сами по&nbsp;себе. Чтобы создать новый объект, вам придётся вначале создать его описание&nbsp;— класс. Он&nbsp;описывает то, из&nbsp;чего состоит объект. Мы&nbsp;разберёмся с&nbsp;классами чуть позже.</p>
                    <h3 style="text-align:center;">Анатомия объекта</h3>
                    <p>Как&nbsp;же устроен объект изнутри? Его содержимое можно поделить на&nbsp;две группы: свойства и&nbsp;методы. Свойства могут быть двух видов: публичные и&nbsp;скрытые. К&nbsp;публичным свойствам можно обращаться за&nbsp;пределами объекта, точно так&nbsp;же, как вы&nbsp;обращаетесь к&nbsp;элементам массива по&nbsp;ключам. Скрытые&nbsp;свойства не&nbsp;имеют аналогов в&nbsp;массиве. Они доступны для чтения и&nbsp;изменения только внутри самого объекта&nbsp;— и&nbsp;это могут делать его методы.</p>
                    <p>Вторая группа&nbsp;— это методы объекта.</p>
                    <p>Набор методов также называется поведением объекта. Как и&nbsp;свойства, методы бывают публичными и&nbsp;скрытыми. Публичные методы объекта можно вызывать из&nbsp;внешнего кода, а&nbsp;скрытые только из&nbsp;самого объекта. Методы способны обращаться к&nbsp;свойствам объекта также просто, как если&nbsp;бы это были их&nbsp;внутренние переменные или аргументы.</p>
                    <h2 style="text-align:center;">Классы</h2>
                    <p>Класс&nbsp;— это шаблон, по&nbsp;которому создаются объекты.</p>
                    <p>Невозможно создать объект «на&nbsp;лету», как это происходит с&nbsp;массивами. Объект создаётся только на&nbsp;основе своего описания&nbsp;— класса. Этим реализация объектов в&nbsp;PHP отличается от&nbsp;JavaScript. В&nbsp;JS&nbsp;объектам не&nbsp;нужны классы,&nbsp;они могут быть созданы и&nbsp;модифицированы когда&nbsp;и&nbsp;как угодно.</p>
                    <h3 style="text-align:center;">Класс как чертёж</h3>
                    <p>Зачем нужны классы, и&nbsp;почему объекты не&nbsp;могут существовать без них?</p>
                    <p>Аналогия очень простая: класс&nbsp;— это чертёж, максимально подробное описание изделия. Сам по&nbsp;себе класс не&nbsp;является чем-то физическим и&nbsp;осязаемым, его не&nbsp;используют непосредственно в&nbsp;коде. Класс является схемой, структурой, на&nbsp;основе которой создают объект.</p>
                    <h3 style="text-align:center;">Жизненный цикл объекта</h3>
                    <div class="post-highlighted-text">
                        <p>&nbsp; &nbsp; &nbsp;Любая работа с&nbsp;объектами в&nbsp;PHP состоит из&nbsp;следующих этапов.</p>
                        <ul>
                            <li>Начинаем с&nbsp;создания класса. В&nbsp;нём&nbsp;фиксируем, из&nbsp;каких свойств и&nbsp;методов будет состоять каждый его экземпляр, задаём начальные значения для каждого свойства. Имея класс, возможно создать его экземпляр&nbsp;— объект.</li>
                            <li>Классы в&nbsp;PHP принято сохранять в&nbsp;отдельных файлах, поэтому вначале подключаем этот сценарий там, где он&nbsp;необходим. Затем вызываем процедуру создания нового объекта на&nbsp;основе этого класса.</li>
                            <li>Чтобы использовать объект в&nbsp;дальнейшем, его следует назначить переменной. Далее будем работать с&nbsp;объектом через переменную: вызывать методы и&nbsp;обращаться к&nbsp;свойствам.</li>
                        </ul>
                    </div>
                    <h3 style="text-align:center;">Пример создания объекта на&nbsp;основе класса</h3>
                    <p>Описание класса:</p>
                    <table style="background-color:hsl( 54, 100%, 94% );border:0px solid hsl(0, 0%, 100%);">
        <tbody>
            <tr>
                <td>
                    <pre class="php language-php"><code class="language-php hljs" data-highlighted="yes">class WeatherEntry
{

    private $date;
    private $comment = "";
    private $temperature = 0;

    private $isRainy = false;

    public function __construct($date, string $comment, int $temperature)
    {
        $this-&gt;date = $date;
        $this-&gt;comment = $comment;
        $this-&gt;temperature = $temperature;
    }

    public function isCold()
    {
        return $this-&gt;temperature &lt; 0;
    }

    public function setRainStatus($rain_status)
    {
        $this-&gt;isRainy = $rain_status;
    }

    public function getDayDescription()
    {
        $dt = strtotime($this-&gt;date);
        $delta = time() - $dt;
        $days = ceil($delta / 86400);

        $res = "Это было $days дней назад. В тот день было";

        if ($this-&gt;isCold()) {
            $res .= "холодно. ";
        }
        else {
            $res .= "довольно тепло.";
        }

        if ($this-&gt;isRainy) {
            $res .= "Семенил дождь.";
        }
        else {
            $res .= "На небе не было ни облачка.";
        }

        return $res;
    }
}
</code></pre>
                </td>
            </tr>
        </tbody>
    </table>
</figure>
                    <p>Создание объекта на&nbsp;основе класса:</p>
                    <table style="background-color:hsl( 54, 100%, 94% );border:0px solid hsl(0, 0%, 100%);">
        <tbody>
            <tr>
                <td>
                    <pre class="php language-php"><code class="language-php hljs" data-highlighted="yes">$firstSeptember = new WeatherEntry("2018-09-01", "День знаний", 14);
$firstSeptember-&gt;setRainStatus(false);

print($firstSeptember-&gt;getDayDescription());

</code></pre>
                </td>
            </tr>
        </tbody>
    </table>
</figure>
                    <h3 style="text-align:center;">Разбор примера</h3>
                    <p>Начнём с&nbsp;целей создания данного класса. Его задача&nbsp;— хранить в&nbsp;объекте данные о&nbsp;погоде за&nbsp;конкретный день, а&nbsp;также предоставлять сводку за&nbsp;этот день в&nbsp;текстовом виде.</p>
                    <p>В&nbsp;классе определено четыре скрытых свойства. Это значит, что к&nbsp;ним не&nbsp;будет доступа за&nbsp;пределами объекта. Читать и&nbsp;записывать эти свойства могут только внутренние методы объекта. Сами свойства хранят температурные параметры (температуру, осадки), дату и&nbsp;дополнительный комментарий к&nbsp;записи. Некоторым свойствам задано значение по&nbsp;умолчанию.</p>
                    <p>Далее идёт перечисление методов. И&nbsp;начинается всё с&nbsp;метода, у&nbsp;которого особое имя и&nbsp;значение&nbsp;—&nbsp;<code>__construct</code>.</p>
                    <p style="text-align:center;"><strong>Что такое конструктор объекта</strong></p>
                    <p>Методы объекта вызываются из&nbsp;внешнего кода, при явном обращении к&nbsp;ним с&nbsp;указанием имени. Но&nbsp;если назвать один метод&nbsp;<code>__construct</code>, то&nbsp;он&nbsp;будет вызываться автоматически&nbsp;<strong>в&nbsp;момент создания объекта</strong>&nbsp;на&nbsp;основе класса.</p>
                    <p>Конструкторы объектов используются для инициализации каких-либо значений и&nbsp;в&nbsp;выполнении других подготовительных операций. В&nbsp;нашем примере конструктор устанавливает содержимое скрытых свойств.</p>
                    <p style="text-align:center;"><strong>Обращение к&nbsp;свойствам и&nbsp;методам объекта</strong></p>
                    <p>Посмотрим, как внутри метода происходит обращение к&nbsp;свойствам.</p>
                    <p>Во-первых, для этого используется специальная переменная <code>this</code>, которая всегда присутствует внутри объекта и&nbsp;ссылается на&nbsp;него самого.</p>
                    <p>Во-вторых, для обращения к&nbsp;методам и&nbsp;свойствам объекта нужен специальный синтаксис: «стрелочка». Такая стрелочка отделяет имя свойства или метода от&nbsp;имени объекта. Это аналог квадратных скобок при работе с&nbsp;массивами.</p>
                    <p>Метод с&nbsp;именем&nbsp;<code>isCold()</code>&nbsp;нужен, чтобы узнать, было&nbsp;ли холодно в&nbsp;тот день, основываясь на&nbsp;показаниях температуры в&nbsp;градусах.</p>
                    <p>Метод&nbsp;<code>setRainStatus()</code>&nbsp;устанавливает логическое значение, которое показывает статус осадков в&nbsp;день наблюдения.</p>
                    <p>Метод&nbsp;<code>getDayDescription()</code>&nbsp;формирует текстовое описание погоды на&nbsp;заданную дату.</p>
                    <p style="text-align:center;"><strong>Создание объекта на&nbsp;основе класса</strong></p>
                    <p>Написав класс, мы&nbsp;выполнили большую часть работы. Теперь создадим новый объект на&nbsp;основе класса и&nbsp;посмотрим, как с&nbsp;ним работать.</p>
                    <p>Новый объект создаётся с&nbsp;помощью ключевого слова <code>new</code>, после которого идёт имя его класса. В&nbsp;круглых скобках передаём все аргументы в&nbsp;метод&nbsp;<code>__construct</code>, если он&nbsp;был написан. Класс не&nbsp;обязан содержать этот метод, и&nbsp;если его нет, то&nbsp;круглые скобки необязательны.</p>
                    <p>В&nbsp;коде&nbsp;передаём в&nbsp;конструктор почти все параметры погодных наблюдений. Затем для созданного объекта вызываются его методы: первый устанавливает значения осадков, а&nbsp;второй возвращает текстовое описание погоды.</p>
                </div>
            </div>
        </div>
    </div>
</div>

</tr></td>
</table>
<br></br>
<br></br>
<br></br>
<div align="center">
<a href="mysql-php.php">Предыдущий раздел</a>| <a href="index.html">На главную</a> | <a href="libraries.php">Следующий раздел</a>
</div>
<br></br>
</body>